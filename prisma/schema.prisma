generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id           String    @id @db.VarChar(50)
  name         String    @db.VarChar(100)
  price        Decimal   @db.Decimal(10, 2)
  features     Json      @default("[]")
  contactLimit Int?      @map("contact_limit")
  modules      Json      @default("[\"cobranca\"]")
  isActive     Boolean?  @default(true) @map("is_active")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  users        User[]

  @@map("plans")
}

model User {
  id                     String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                  String          @unique @db.VarChar(255)
  name                   String          @db.VarChar(255)
  companyName            String?         @map("company_name") @db.VarChar(255)
  phone                  String?         @db.VarChar(20)
  planId                 String?         @default("trial") @map("plan_id") @db.VarChar(50)
  trialEndsAt            DateTime?       @default(dbgenerated("(now() + '14 days'::interval)")) @map("trial_ends_at") @db.Timestamp(6)
  subscriptionStatus     String?         @default("trial") @map("subscription_status") @db.VarChar(50)
  stripeCustomerId       String?         @map("stripe_customer_id") @db.VarChar(255)
  whatsappConnected      Boolean?        @default(false) @map("whatsapp_connected")
  whatsappInstanceId     String?         @map("whatsapp_instance_id") @db.VarChar(255)
  companyPix             String?         @map("company_pix") @db.VarChar(255)
  businessHours          Json?           @default("{\"end\": \"18:00\", \"start\": \"09:00\", \"timezone\": \"America/Sao_Paulo\"}") @map("business_hours")
  calendlyLink           String?         @map("calendly_link") @db.VarChar(500)
  qualificationQuestions Json?           @default("[]") @map("qualification_questions")
  scoringCriteria        Json?           @default("{}") @map("scoring_criteria")
  createdAt              DateTime?       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  emailVerified          DateTime?       @db.Timestamp(6)
  image                  String?         @db.VarChar(500)
  Account                Account[]
  Session                Session[]
  campaigns              Campaign[]
  contacts               Contact[]
  integrations           Integration[]
  leads                  Lead[]
  messages               Message[]
  system_logs            system_logs[]
  templates              Template[]
  usage_metrics          usage_metrics[]
  plan                   Plan?           @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workflows              Workflow[]

  @@map("users")
}

model Contact {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  name          String    @db.VarChar(255)
  phone         String    @db.VarChar(20)
  email         String?   @db.VarChar(255)
  company       String?   @db.VarChar(255)
  document      String?   @db.VarChar(255)
  value         Decimal?  @db.Decimal(10, 2)
  dueDate       DateTime? @map("due_date") @db.Date
  daysOverdue   Int?      @default(0) @map("days_overdue")
  invoiceNumber String?   @map("invoice_number") @db.VarChar(255)
  description   String?
  status        String?   @default("pending") @db.VarChar(50)
  lastContactAt DateTime? @map("last_contact_at") @db.Timestamp(6)
  contactCount  Int?      @default(0) @map("contact_count")
  notes         String?
  tags          Json?     @default("[]")
  custom_fields Json?     @default("{}")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages      Message[]

  @@index([phone], map: "idx_contacts_phone")
  @@index([status], map: "idx_contacts_status")
  @@index([dueDate], map: "idx_contacts_due_date")
  @@index([userId], map: "idx_contacts_user_id")
  @@map("contacts")
}

model Template {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String     @map("user_id") @db.Uuid
  name       String     @db.VarChar(255)
  content    String
  variables  Json?      @default("[]")
  category   String?    @default("cobranca") @db.VarChar(100)
  isActive   Boolean?   @default(true) @map("is_active")
  usageCount Int?       @default(0) @map("usage_count")
  createdAt  DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  campaigns  Campaign[]
  messages   Message[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category], map: "idx_templates_category")
  @@index([isActive], map: "idx_templates_is_active")
  @@index([userId], map: "idx_templates_user_id")
  @@map("templates")
}

model Message {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  contactId         String    @map("contact_id") @db.Uuid
  campaign_id       String?   @db.Uuid
  templateId        String?   @map("template_id") @db.Uuid
  content           String
  status            String?   @default("sent") @db.VarChar(50)
  direction         String?   @default("outbound") @db.VarChar(20)
  whatsappMessageId String?   @map("whatsapp_message_id") @db.VarChar(255)
  deliveredAt       DateTime? @map("delivered_at") @db.Timestamp(6)
  readAt            DateTime? @map("read_at") @db.Timestamp(6)
  repliedAt         DateTime? @map("replied_at") @db.Timestamp(6)
  errorMessage      String?   @map("error_message")
  sentAt            DateTime? @default(now()) @map("sent_at") @db.Timestamp(6)
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  campaigns         Campaign? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contact           Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  templates         Template? @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sentAt], map: "idx_messages_sent_at")
  @@index([status], map: "idx_messages_status")
  @@index([contactId], map: "idx_messages_contact_id")
  @@index([userId], map: "idx_messages_user_id")
  @@map("messages")
}

model Lead {
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId               String    @map("user_id") @db.Uuid
  name                 String    @db.VarChar(255)
  phone                String    @db.VarChar(20)
  email                String?   @db.VarChar(255)
  company              String?   @db.VarChar(255)
  source               String?   @db.VarChar(100)
  score                Int?      @default(0)
  status               String?   @default("new") @db.VarChar(50)
  qualification_status String?   @default("unqualified") @db.VarChar(50)
  last_interaction_at  DateTime? @db.Timestamp(6)
  scheduled_call_at    DateTime? @db.Timestamp(6)
  notes                String?
  custom_fields        Json?     @default("{}")
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([score], map: "idx_leads_score")
  @@index([status], map: "idx_leads_status")
  @@index([userId], map: "idx_leads_user_id")
  @@map("leads")
}

model Workflow {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  name            String    @db.VarChar(255)
  n8nWorkflowId   String?   @map("n8n_workflow_id") @db.VarChar(255)
  webhookUrl      String?   @map("webhook_url") @db.VarChar(500)
  trigger_type    String?   @db.VarChar(100)
  isActive        Boolean?  @default(true) @map("is_active")
  executionCount  Int?      @default(0) @map("execution_count")
  lastExecutionAt DateTime? @map("last_execution_at") @db.Timestamp(6)
  configuration   Json?     @default("{}")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("workflows")
}

model Campaign {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  name            String    @db.VarChar(255)
  templateId      String?   @map("template_id") @db.Uuid
  status          String?   @default("draft") @db.VarChar(50)
  scheduledAt     DateTime? @map("scheduled_at") @db.Timestamp(6)
  total_contacts  Int?      @default(0)
  sent_count      Int?      @default(0)
  delivered_count Int?      @default(0)
  read_count      Int?      @default(0)
  replied_count   Int?      @default(0)
  failed_count    Int?      @default(0)
  completedAt     DateTime? @map("completed_at") @db.Timestamp(6)
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  templates       Template? @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages        Message[]

  @@index([status], map: "idx_campaigns_status")
  @@index([scheduledAt], map: "idx_campaigns_scheduled_at")
  @@index([userId], map: "idx_campaigns_user_id")
  @@map("campaigns")
}

model Integration {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  provider      String    @db.VarChar(100)
  name          String    @db.VarChar(255)
  api_key       String?   @db.VarChar(500)
  webhook_url   String?   @db.VarChar(500)
  configuration Json?     @default("{}")
  isActive      Boolean?  @default(true) @map("is_active")
  lastSyncAt    DateTime? @map("last_sync_at") @db.Timestamp(6)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("integrations")
}

model extensions {
  id                 String   @id @db.Uuid
  type               String?
  settings           Json?
  tenant_external_id String?
  inserted_at        DateTime @db.Timestamp(0)
  updated_at         DateTime @db.Timestamp(0)
  tenants            tenants? @relation(fields: [tenant_external_id], references: [external_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([tenant_external_id, type], map: "extensions_tenant_external_id_type_index")
  @@index([tenant_external_id], map: "extensions_tenant_external_id_index")
}

model schema_migrations {
  version     BigInt    @id
  inserted_at DateTime? @db.Timestamp(0)
}

model system_logs {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String?   @db.Uuid
  action      String    @db.VarChar(255)
  entity_type String?   @db.VarChar(100)
  entity_id   String?   @db.Uuid
  details     Json?     @default("{}")
  ip_address  String?   @db.Inet
  user_agent  String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at], map: "idx_system_logs_created_at")
  @@index([user_id], map: "idx_system_logs_user_id")
}

model tenants {
  id                      String       @id @db.Uuid
  name                    String?
  external_id             String?      @unique(map: "tenants_external_id_index")
  jwt_secret              String?
  max_concurrent_users    Int          @default(200)
  inserted_at             DateTime     @db.Timestamp(0)
  updated_at              DateTime     @db.Timestamp(0)
  max_events_per_second   Int          @default(100)
  postgres_cdc_default    String?      @default("postgres_cdc_rls")
  max_bytes_per_second    Int          @default(100000)
  max_channels_per_client Int          @default(100)
  max_joins_per_second    Int          @default(500)
  suspend                 Boolean?     @default(false)
  jwt_jwks                Json?
  notify_private_alpha    Boolean?     @default(false)
  private_only            Boolean      @default(false)
  extensions              extensions[]
}

model usage_metrics {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String    @db.Uuid
  metric_type  String    @db.VarChar(100)
  value        Int
  period_start DateTime  @db.Date
  period_end   DateTime  @db.Date
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  users        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, metric_type, period_start])
}

model Account {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String   @db.Uuid
  type              String   @db.VarChar(255)
  provider          String   @db.VarChar(255)
  providerAccountId String   @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?  @db.VarChar(255)
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @default(now()) @db.Timestamp(6)
  users             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique @db.VarChar(255)
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamp(6)
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  @@id([identifier, token])
  @@unique([identifier, token])
}
